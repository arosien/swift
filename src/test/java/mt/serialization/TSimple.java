/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package mt.serialization;

import com.facebook.thrift.TBase;
import com.facebook.thrift.TException;
import com.facebook.thrift.protocol.TField;
import com.facebook.thrift.protocol.TList;
import com.facebook.thrift.protocol.TMap;
import com.facebook.thrift.protocol.TProtocol;
import com.facebook.thrift.protocol.TProtocolUtil;
import com.facebook.thrift.protocol.TStruct;
import com.facebook.thrift.protocol.TType;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TSimple implements TBase, java.io.Serializable {
  public boolean aBool;
  public static final int ABOOL = 1;
  public byte aByte;
  public static final int ABYTE = 2;
  public short aI16;
  public static final int AI16 = 3;
  public int aI32;
  public static final int AI32 = 4;
  public long aI64;
  public static final int AI64 = 5;
  public byte[] aBinary;
  public static final int ABINARY = 6;
  public String aString;
  public static final int ASTRING = 7;
  public Map<Integer,String> mapOfI32s;
  public static final int MAPOFI32S = 8;
  public TNested nested;
  public static final int NESTED = 9;
  public List<List<byte[]>> listOfListOfBinaries;
  public static final int LISTOFLISTOFBINARIES = 10;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean aBool = false;
    public boolean aByte = false;
    public boolean aI16 = false;
    public boolean aI32 = false;
    public boolean aI64 = false;
    public boolean aBinary = false;
    public boolean aString = false;
    public boolean mapOfI32s = false;
    public boolean nested = false;
    public boolean listOfListOfBinaries = false;
  }

  public TSimple() {
  }

  public TSimple(
    boolean aBool,
    byte aByte,
    short aI16,
    int aI32,
    long aI64,
    byte[] aBinary,
    String aString,
    Map<Integer,String> mapOfI32s,
    TNested nested,
    List<List<byte[]>> listOfListOfBinaries)
  {
    this();
    this.aBool = aBool;
    this.__isset.aBool = true;
    this.aByte = aByte;
    this.__isset.aByte = true;
    this.aI16 = aI16;
    this.__isset.aI16 = true;
    this.aI32 = aI32;
    this.__isset.aI32 = true;
    this.aI64 = aI64;
    this.__isset.aI64 = true;
    this.aBinary = aBinary;
    this.__isset.aBinary = (aBinary != null);
    this.aString = aString;
    this.__isset.aString = (aString != null);
    this.mapOfI32s = mapOfI32s;
    this.__isset.mapOfI32s = (mapOfI32s != null);
    this.nested = nested;
    this.__isset.nested = (nested != null);
    this.listOfListOfBinaries = listOfListOfBinaries;
    this.__isset.listOfListOfBinaries = (listOfListOfBinaries != null);
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSimple)
      return this.equals((TSimple)that);
    return false;
  }

  public boolean equals(TSimple that) {
    if (that == null)
      return false;

    boolean this_present_aBool = true;
    boolean that_present_aBool = true;
    if (this_present_aBool || that_present_aBool) {
      if (!(this_present_aBool && that_present_aBool))
        return false;
      if (this.aBool != that.aBool)
        return false;
    }

    boolean this_present_aByte = true && (this.__isset.aByte);
    boolean that_present_aByte = true && (that.__isset.aByte);
    if (this_present_aByte || that_present_aByte) {
      if (!(this_present_aByte && that_present_aByte))
        return false;
      if (this.aByte != that.aByte)
        return false;
    }

    boolean this_present_aI16 = true;
    boolean that_present_aI16 = true;
    if (this_present_aI16 || that_present_aI16) {
      if (!(this_present_aI16 && that_present_aI16))
        return false;
      if (this.aI16 != that.aI16)
        return false;
    }

    boolean this_present_aI32 = true;
    boolean that_present_aI32 = true;
    if (this_present_aI32 || that_present_aI32) {
      if (!(this_present_aI32 && that_present_aI32))
        return false;
      if (this.aI32 != that.aI32)
        return false;
    }

    boolean this_present_aI64 = true;
    boolean that_present_aI64 = true;
    if (this_present_aI64 || that_present_aI64) {
      if (!(this_present_aI64 && that_present_aI64))
        return false;
      if (this.aI64 != that.aI64)
        return false;
    }

    boolean this_present_aBinary = true && (this.aBinary != null);
    boolean that_present_aBinary = true && (that.aBinary != null);
    if (this_present_aBinary || that_present_aBinary) {
      if (!(this_present_aBinary && that_present_aBinary))
        return false;
      if (!java.util.Arrays.equals(this.aBinary, that.aBinary))
        return false;
    }

    boolean this_present_aString = true && (this.aString != null);
    boolean that_present_aString = true && (that.aString != null);
    if (this_present_aString || that_present_aString) {
      if (!(this_present_aString && that_present_aString))
        return false;
      if (!this.aString.equals(that.aString))
        return false;
    }

    boolean this_present_mapOfI32s = true && (this.mapOfI32s != null);
    boolean that_present_mapOfI32s = true && (that.mapOfI32s != null);
    if (this_present_mapOfI32s || that_present_mapOfI32s) {
      if (!(this_present_mapOfI32s && that_present_mapOfI32s))
        return false;
      if (!this.mapOfI32s.equals(that.mapOfI32s))
        return false;
    }

    boolean this_present_nested = true && (this.nested != null);
    boolean that_present_nested = true && (that.nested != null);
    if (this_present_nested || that_present_nested) {
      if (!(this_present_nested && that_present_nested))
        return false;
      if (!this.nested.equals(that.nested))
        return false;
    }

    boolean this_present_listOfListOfBinaries = true && (this.listOfListOfBinaries != null);
    boolean that_present_listOfListOfBinaries = true && (that.listOfListOfBinaries != null);
    if (this_present_listOfListOfBinaries || that_present_listOfListOfBinaries) {
      if (!(this_present_listOfListOfBinaries && that_present_listOfListOfBinaries))
        return false;
      if (!this.listOfListOfBinaries.equals(that.listOfListOfBinaries))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case ABOOL:
          if (field.type == TType.BOOL) {
            this.aBool = iprot.readBool();
            this.__isset.aBool = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ABYTE:
          if (field.type == TType.BYTE) {
            this.aByte = iprot.readByte();
            this.__isset.aByte = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AI16:
          if (field.type == TType.I16) {
            this.aI16 = iprot.readI16();
            this.__isset.aI16 = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AI32:
          if (field.type == TType.I32) {
            this.aI32 = iprot.readI32();
            this.__isset.aI32 = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AI64:
          if (field.type == TType.I64) {
            this.aI64 = iprot.readI64();
            this.__isset.aI64 = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ABINARY:
          if (field.type == TType.STRING) {
            this.aBinary = iprot.readBinary();
            this.__isset.aBinary = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ASTRING:
          if (field.type == TType.STRING) {
            this.aString = iprot.readString();
            this.__isset.aString = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MAPOFI32S:
          if (field.type == TType.MAP) {
            {
              TMap _map0 = iprot.readMapBegin();
              this.mapOfI32s = new HashMap<Integer,String>(2*_map0.size);
              for (int _i1 = 0; _i1 < _map0.size; ++_i1)
              {
                int _key2;
                String _val3;
                _key2 = iprot.readI32();
                _val3 = iprot.readString();
                this.mapOfI32s.put(_key2, _val3);
              }
              iprot.readMapEnd();
            }
            this.__isset.mapOfI32s = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NESTED:
          if (field.type == TType.STRUCT) {
            this.nested = new TNested();
            this.nested.read(iprot);
            this.__isset.nested = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LISTOFLISTOFBINARIES:
          if (field.type == TType.LIST) {
            {
              TList _list4 = iprot.readListBegin();
              this.listOfListOfBinaries = new ArrayList<List<byte[]>>(_list4.size);
              for (int _i5 = 0; _i5 < _list4.size; ++_i5)
              {
                List<byte[]> _elem6 = new ArrayList<byte[]>();
                {
                  TList _list7 = iprot.readListBegin();
                  _elem6 = new ArrayList<byte[]>(_list7.size);
                  for (int _i8 = 0; _i8 < _list7.size; ++_i8)
                  {
                    byte[] _elem9 = null;
                    _elem9 = iprot.readBinary();
                    _elem6.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                this.listOfListOfBinaries.add(_elem6);
              }
              iprot.readListEnd();
            }
            this.__isset.listOfListOfBinaries = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("TSimple");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    field.name = "aBool";
    field.type = TType.BOOL;
    field.id = ABOOL;
    oprot.writeFieldBegin(field);
    oprot.writeBool(this.aBool);
    oprot.writeFieldEnd();
    field.name = "aByte";
    field.type = TType.BYTE;
    field.id = ABYTE;
    oprot.writeFieldBegin(field);
    oprot.writeByte(this.aByte);
    oprot.writeFieldEnd();
    field.name = "aI16";
    field.type = TType.I16;
    field.id = AI16;
    oprot.writeFieldBegin(field);
    oprot.writeI16(this.aI16);
    oprot.writeFieldEnd();
    field.name = "aI32";
    field.type = TType.I32;
    field.id = AI32;
    oprot.writeFieldBegin(field);
    oprot.writeI32(this.aI32);
    oprot.writeFieldEnd();
    field.name = "aI64";
    field.type = TType.I64;
    field.id = AI64;
    oprot.writeFieldBegin(field);
    oprot.writeI64(this.aI64);
    oprot.writeFieldEnd();
    if (this.aBinary != null) {
      field.name = "aBinary";
      field.type = TType.STRING;
      field.id = ABINARY;
      oprot.writeFieldBegin(field);
      oprot.writeBinary(this.aBinary);
      oprot.writeFieldEnd();
    }
    if (this.aString != null) {
      field.name = "aString";
      field.type = TType.STRING;
      field.id = ASTRING;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.aString);
      oprot.writeFieldEnd();
    }
    if (this.mapOfI32s != null) {
      field.name = "mapOfI32s";
      field.type = TType.MAP;
      field.id = MAPOFI32S;
      oprot.writeFieldBegin(field);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, this.mapOfI32s.size()));
        for (int _iter10 : this.mapOfI32s.keySet())        {
          oprot.writeI32(_iter10);
          oprot.writeString(this.mapOfI32s.get(_iter10));
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.nested != null) {
      field.name = "nested";
      field.type = TType.STRUCT;
      field.id = NESTED;
      oprot.writeFieldBegin(field);
      this.nested.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.listOfListOfBinaries != null) {
      field.name = "listOfListOfBinaries";
      field.type = TType.LIST;
      field.id = LISTOFLISTOFBINARIES;
      oprot.writeFieldBegin(field);
      {
        oprot.writeListBegin(new TList(TType.LIST, this.listOfListOfBinaries.size()));
        for (List<byte[]> _iter11 : this.listOfListOfBinaries)        {
          {
            oprot.writeListBegin(new TList(TType.STRING, _iter11.size()));
            for (byte[] _iter12 : _iter11)            {
              oprot.writeBinary(_iter12);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("TSimple(");
    boolean first = true;

    if (!first) sb.append(", ");
    sb.append("aBool:");
    sb.append(this.aBool);
    first = false;
    if (__isset.aByte) {
      if (!first) sb.append(", ");
      sb.append("aByte:");
      sb.append(this.aByte);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("aI16:");
    sb.append(this.aI16);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aI32:");
    sb.append(this.aI32);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aI64:");
    sb.append(this.aI64);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aBinary:");
    sb.append(this.aBinary);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aString:");
    sb.append(this.aString);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapOfI32s:");
    sb.append(this.mapOfI32s);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nested:");
    sb.append(this.nested);
    first = false;
    if (!first) sb.append(", ");
    sb.append("listOfListOfBinaries:");
    sb.append(this.listOfListOfBinaries);
    first = false;
    sb.append(")");
    return sb.toString();
  }

}

