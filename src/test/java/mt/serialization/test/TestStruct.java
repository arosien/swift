/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package mt.serialization.test;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class TestStruct implements TBase, java.io.Serializable {
  public boolean booleanField;
  public static final int BOOLEANFIELD = 1;
  public byte byteField;
  public static final int BYTEFIELD = 2;
  public short shortField;
  public static final int SHORTFIELD = 3;
  public int intField;
  public static final int INTFIELD = 4;
  public long longField;
  public static final int LONGFIELD = 5;
  public double doubleField;
  public static final int DOUBLEFIELD = 6;
  public String stringField;
  public static final int STRINGFIELD = 7;
  public byte[] binaryField;
  public static final int BINARYFIELD = 8;
  public List<Integer> listOfIntsField;
  public static final int LISTOFINTSFIELD = 9;
  public Set<Integer> setOfIntsField;
  public static final int SETOFINTSFIELD = 10;
  public Map<Integer,Integer> mapOfIntsIntsField;
  public static final int MAPOFINTSINTSFIELD = 11;
  public NestedStruct structField;
  public static final int STRUCTFIELD = 12;
  public List<List<Integer>> nestedListOfIntsField;
  public static final int NESTEDLISTOFINTSFIELD = 13;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean booleanField = false;
    public boolean byteField = false;
    public boolean shortField = false;
    public boolean intField = false;
    public boolean longField = false;
    public boolean doubleField = false;
    public boolean stringField = false;
    public boolean binaryField = false;
    public boolean listOfIntsField = false;
    public boolean setOfIntsField = false;
    public boolean mapOfIntsIntsField = false;
    public boolean structField = false;
    public boolean nestedListOfIntsField = false;
  }

  public TestStruct() {
  }

  public TestStruct(
    boolean booleanField,
    byte byteField,
    short shortField,
    int intField,
    long longField,
    double doubleField,
    String stringField,
    byte[] binaryField,
    List<Integer> listOfIntsField,
    Set<Integer> setOfIntsField,
    Map<Integer,Integer> mapOfIntsIntsField,
    NestedStruct structField,
    List<List<Integer>> nestedListOfIntsField)
  {
    this();
    this.booleanField = booleanField;
    this.__isset.booleanField = true;
    this.byteField = byteField;
    this.__isset.byteField = true;
    this.shortField = shortField;
    this.__isset.shortField = true;
    this.intField = intField;
    this.__isset.intField = true;
    this.longField = longField;
    this.__isset.longField = true;
    this.doubleField = doubleField;
    this.__isset.doubleField = true;
    this.stringField = stringField;
    this.__isset.stringField = (stringField != null);
    this.binaryField = binaryField;
    this.__isset.binaryField = (binaryField != null);
    this.listOfIntsField = listOfIntsField;
    this.__isset.listOfIntsField = (listOfIntsField != null);
    this.setOfIntsField = setOfIntsField;
    this.__isset.setOfIntsField = (setOfIntsField != null);
    this.mapOfIntsIntsField = mapOfIntsIntsField;
    this.__isset.mapOfIntsIntsField = (mapOfIntsIntsField != null);
    this.structField = structField;
    this.__isset.structField = (structField != null);
    this.nestedListOfIntsField = nestedListOfIntsField;
    this.__isset.nestedListOfIntsField = (nestedListOfIntsField != null);
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TestStruct)
      return this.equals((TestStruct)that);
    return false;
  }

  public boolean equals(TestStruct that) {
    if (that == null)
      return false;

    boolean this_present_booleanField = true;
    boolean that_present_booleanField = true;
    if (this_present_booleanField || that_present_booleanField) {
      if (!(this_present_booleanField && that_present_booleanField))
        return false;
      if (this.booleanField != that.booleanField)
        return false;
    }

    boolean this_present_byteField = true;
    boolean that_present_byteField = true;
    if (this_present_byteField || that_present_byteField) {
      if (!(this_present_byteField && that_present_byteField))
        return false;
      if (this.byteField != that.byteField)
        return false;
    }

    boolean this_present_shortField = true;
    boolean that_present_shortField = true;
    if (this_present_shortField || that_present_shortField) {
      if (!(this_present_shortField && that_present_shortField))
        return false;
      if (this.shortField != that.shortField)
        return false;
    }

    boolean this_present_intField = true;
    boolean that_present_intField = true;
    if (this_present_intField || that_present_intField) {
      if (!(this_present_intField && that_present_intField))
        return false;
      if (this.intField != that.intField)
        return false;
    }

    boolean this_present_longField = true;
    boolean that_present_longField = true;
    if (this_present_longField || that_present_longField) {
      if (!(this_present_longField && that_present_longField))
        return false;
      if (this.longField != that.longField)
        return false;
    }

    boolean this_present_doubleField = true;
    boolean that_present_doubleField = true;
    if (this_present_doubleField || that_present_doubleField) {
      if (!(this_present_doubleField && that_present_doubleField))
        return false;
      if (this.doubleField != that.doubleField)
        return false;
    }

    boolean this_present_stringField = true && (this.stringField != null);
    boolean that_present_stringField = true && (that.stringField != null);
    if (this_present_stringField || that_present_stringField) {
      if (!(this_present_stringField && that_present_stringField))
        return false;
      if (!this.stringField.equals(that.stringField))
        return false;
    }

    boolean this_present_binaryField = true && (this.binaryField != null);
    boolean that_present_binaryField = true && (that.binaryField != null);
    if (this_present_binaryField || that_present_binaryField) {
      if (!(this_present_binaryField && that_present_binaryField))
        return false;
      if (!java.util.Arrays.equals(this.binaryField, that.binaryField))
        return false;
    }

    boolean this_present_listOfIntsField = true && (this.listOfIntsField != null);
    boolean that_present_listOfIntsField = true && (that.listOfIntsField != null);
    if (this_present_listOfIntsField || that_present_listOfIntsField) {
      if (!(this_present_listOfIntsField && that_present_listOfIntsField))
        return false;
      if (!this.listOfIntsField.equals(that.listOfIntsField))
        return false;
    }

    boolean this_present_setOfIntsField = true && (this.setOfIntsField != null);
    boolean that_present_setOfIntsField = true && (that.setOfIntsField != null);
    if (this_present_setOfIntsField || that_present_setOfIntsField) {
      if (!(this_present_setOfIntsField && that_present_setOfIntsField))
        return false;
      if (!this.setOfIntsField.equals(that.setOfIntsField))
        return false;
    }

    boolean this_present_mapOfIntsIntsField = true && (this.mapOfIntsIntsField != null);
    boolean that_present_mapOfIntsIntsField = true && (that.mapOfIntsIntsField != null);
    if (this_present_mapOfIntsIntsField || that_present_mapOfIntsIntsField) {
      if (!(this_present_mapOfIntsIntsField && that_present_mapOfIntsIntsField))
        return false;
      if (!this.mapOfIntsIntsField.equals(that.mapOfIntsIntsField))
        return false;
    }

    boolean this_present_structField = true && (this.structField != null);
    boolean that_present_structField = true && (that.structField != null);
    if (this_present_structField || that_present_structField) {
      if (!(this_present_structField && that_present_structField))
        return false;
      if (!this.structField.equals(that.structField))
        return false;
    }

    boolean this_present_nestedListOfIntsField = true && (this.nestedListOfIntsField != null);
    boolean that_present_nestedListOfIntsField = true && (that.nestedListOfIntsField != null);
    if (this_present_nestedListOfIntsField || that_present_nestedListOfIntsField) {
      if (!(this_present_nestedListOfIntsField && that_present_nestedListOfIntsField))
        return false;
      if (!this.nestedListOfIntsField.equals(that.nestedListOfIntsField))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case BOOLEANFIELD:
          if (field.type == TType.BOOL) {
            this.booleanField = iprot.readBool();
            this.__isset.booleanField = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTEFIELD:
          if (field.type == TType.BYTE) {
            this.byteField = iprot.readByte();
            this.__isset.byteField = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SHORTFIELD:
          if (field.type == TType.I16) {
            this.shortField = iprot.readI16();
            this.__isset.shortField = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INTFIELD:
          if (field.type == TType.I32) {
            this.intField = iprot.readI32();
            this.__isset.intField = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LONGFIELD:
          if (field.type == TType.I64) {
            this.longField = iprot.readI64();
            this.__isset.longField = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DOUBLEFIELD:
          if (field.type == TType.DOUBLE) {
            this.doubleField = iprot.readDouble();
            this.__isset.doubleField = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STRINGFIELD:
          if (field.type == TType.STRING) {
            this.stringField = iprot.readString();
            this.__isset.stringField = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BINARYFIELD:
          if (field.type == TType.STRING) {
            this.binaryField = iprot.readBinary();
            this.__isset.binaryField = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LISTOFINTSFIELD:
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.listOfIntsField = new ArrayList<Integer>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                int _elem2 = 0;
                _elem2 = iprot.readI32();
                this.listOfIntsField.add(_elem2);
              }
              iprot.readListEnd();
            }
            this.__isset.listOfIntsField = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SETOFINTSFIELD:
          if (field.type == TType.SET) {
            {
              TSet _set3 = iprot.readSetBegin();
              this.setOfIntsField = new HashSet<Integer>(2*_set3.size);
              for (int _i4 = 0; _i4 < _set3.size; ++_i4)
              {
                int _elem5;
                _elem5 = iprot.readI32();
                this.setOfIntsField.add(_elem5);
              }
              iprot.readSetEnd();
            }
            this.__isset.setOfIntsField = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MAPOFINTSINTSFIELD:
          if (field.type == TType.MAP) {
            {
              TMap _map6 = iprot.readMapBegin();
              this.mapOfIntsIntsField = new HashMap<Integer,Integer>(2*_map6.size);
              for (int _i7 = 0; _i7 < _map6.size; ++_i7)
              {
                int _key8;
                int _val9;
                _key8 = iprot.readI32();
                _val9 = iprot.readI32();
                this.mapOfIntsIntsField.put(_key8, _val9);
              }
              iprot.readMapEnd();
            }
            this.__isset.mapOfIntsIntsField = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STRUCTFIELD:
          if (field.type == TType.STRUCT) {
            this.structField = new NestedStruct();
            this.structField.read(iprot);
            this.__isset.structField = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NESTEDLISTOFINTSFIELD:
          if (field.type == TType.LIST) {
            {
              TList _list10 = iprot.readListBegin();
              this.nestedListOfIntsField = new ArrayList<List<Integer>>(_list10.size);
              for (int _i11 = 0; _i11 < _list10.size; ++_i11)
              {
                List<Integer> _elem12 = new ArrayList<Integer>();
                {
                  TList _list13 = iprot.readListBegin();
                  _elem12 = new ArrayList<Integer>(_list13.size);
                  for (int _i14 = 0; _i14 < _list13.size; ++_i14)
                  {
                    int _elem15 = 0;
                    _elem15 = iprot.readI32();
                    _elem12.add(_elem15);
                  }
                  iprot.readListEnd();
                }
                this.nestedListOfIntsField.add(_elem12);
              }
              iprot.readListEnd();
            }
            this.__isset.nestedListOfIntsField = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("TestStruct");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    field.name = "booleanField";
    field.type = TType.BOOL;
    field.id = BOOLEANFIELD;
    oprot.writeFieldBegin(field);
    oprot.writeBool(this.booleanField);
    oprot.writeFieldEnd();
    field.name = "byteField";
    field.type = TType.BYTE;
    field.id = BYTEFIELD;
    oprot.writeFieldBegin(field);
    oprot.writeByte(this.byteField);
    oprot.writeFieldEnd();
    field.name = "shortField";
    field.type = TType.I16;
    field.id = SHORTFIELD;
    oprot.writeFieldBegin(field);
    oprot.writeI16(this.shortField);
    oprot.writeFieldEnd();
    field.name = "intField";
    field.type = TType.I32;
    field.id = INTFIELD;
    oprot.writeFieldBegin(field);
    oprot.writeI32(this.intField);
    oprot.writeFieldEnd();
    field.name = "longField";
    field.type = TType.I64;
    field.id = LONGFIELD;
    oprot.writeFieldBegin(field);
    oprot.writeI64(this.longField);
    oprot.writeFieldEnd();
    field.name = "doubleField";
    field.type = TType.DOUBLE;
    field.id = DOUBLEFIELD;
    oprot.writeFieldBegin(field);
    oprot.writeDouble(this.doubleField);
    oprot.writeFieldEnd();
    if (this.stringField != null) {
      field.name = "stringField";
      field.type = TType.STRING;
      field.id = STRINGFIELD;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.stringField);
      oprot.writeFieldEnd();
    }
    if (this.binaryField != null) {
      field.name = "binaryField";
      field.type = TType.STRING;
      field.id = BINARYFIELD;
      oprot.writeFieldBegin(field);
      oprot.writeBinary(this.binaryField);
      oprot.writeFieldEnd();
    }
    if (this.listOfIntsField != null) {
      field.name = "listOfIntsField";
      field.type = TType.LIST;
      field.id = LISTOFINTSFIELD;
      oprot.writeFieldBegin(field);
      {
        oprot.writeListBegin(new TList(TType.I32, this.listOfIntsField.size()));
        for (int _iter16 : this.listOfIntsField)        {
          oprot.writeI32(_iter16);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.setOfIntsField != null) {
      field.name = "setOfIntsField";
      field.type = TType.SET;
      field.id = SETOFINTSFIELD;
      oprot.writeFieldBegin(field);
      {
        oprot.writeSetBegin(new TSet(TType.I32, this.setOfIntsField.size()));
        for (int _iter17 : this.setOfIntsField)        {
          oprot.writeI32(_iter17);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapOfIntsIntsField != null) {
      field.name = "mapOfIntsIntsField";
      field.type = TType.MAP;
      field.id = MAPOFINTSINTSFIELD;
      oprot.writeFieldBegin(field);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.I32, this.mapOfIntsIntsField.size()));
        for (int _iter18 : this.mapOfIntsIntsField.keySet())        {
          oprot.writeI32(_iter18);
          oprot.writeI32(this.mapOfIntsIntsField.get(_iter18));
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.structField != null) {
      field.name = "structField";
      field.type = TType.STRUCT;
      field.id = STRUCTFIELD;
      oprot.writeFieldBegin(field);
      this.structField.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.nestedListOfIntsField != null) {
      field.name = "nestedListOfIntsField";
      field.type = TType.LIST;
      field.id = NESTEDLISTOFINTSFIELD;
      oprot.writeFieldBegin(field);
      {
        oprot.writeListBegin(new TList(TType.LIST, this.nestedListOfIntsField.size()));
        for (List<Integer> _iter19 : this.nestedListOfIntsField)        {
          {
            oprot.writeListBegin(new TList(TType.I32, _iter19.size()));
            for (int _iter20 : _iter19)            {
              oprot.writeI32(_iter20);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("TestStruct(");
    boolean first = true;

    if (!first) sb.append(", ");
    sb.append("booleanField:");
    sb.append(this.booleanField);
    first = false;
    if (!first) sb.append(", ");
    sb.append("byteField:");
    sb.append(this.byteField);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortField:");
    sb.append(this.shortField);
    first = false;
    if (!first) sb.append(", ");
    sb.append("intField:");
    sb.append(this.intField);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longField:");
    sb.append(this.longField);
    first = false;
    if (!first) sb.append(", ");
    sb.append("doubleField:");
    sb.append(this.doubleField);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringField:");
    sb.append(this.stringField);
    first = false;
    if (!first) sb.append(", ");
    sb.append("binaryField:");
    sb.append(this.binaryField);
    first = false;
    if (!first) sb.append(", ");
    sb.append("listOfIntsField:");
    sb.append(this.listOfIntsField);
    first = false;
    if (!first) sb.append(", ");
    sb.append("setOfIntsField:");
    sb.append(this.setOfIntsField);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapOfIntsIntsField:");
    sb.append(this.mapOfIntsIntsField);
    first = false;
    if (!first) sb.append(", ");
    sb.append("structField:");
    sb.append(this.structField);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nestedListOfIntsField:");
    sb.append(this.nestedListOfIntsField);
    first = false;
    sb.append(")");
    return sb.toString();
  }

}

