/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package mt.serialization;

import com.facebook.thrift.TBase;
import com.facebook.thrift.TException;
import com.facebook.thrift.protocol.TField;
import com.facebook.thrift.protocol.TProtocol;
import com.facebook.thrift.protocol.TProtocolUtil;
import com.facebook.thrift.protocol.TStruct;
import com.facebook.thrift.protocol.TType;


public class TSimpleWithMethods
	implements TBase, java.io.Serializable {
  public boolean aBool;
  public static final int ABOOL = 1;
  public byte aByte;
  public static final int ABYTE = 2;
  public short aI16;
  public static final int AI16 = 3;
  public int aI32;
  public static final int AI32 = 4;
  public long aI64;
  public static final int AI64 = 5;
  public byte[] aBinary;
  public static final int ABINARY = 6;
  public String aString;
  public static final int ASTRING = 8;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean aBool = false;
    public boolean aByte = false;
    public boolean aI16 = false;
    public boolean aI32 = false;
    public boolean aI64 = false;
    public boolean aBinary = false;
    public boolean aString = false;
  }

  public TSimpleWithMethods() {
  }

  public TSimpleWithMethods(
    boolean aBool,
    byte aByte,
    short aI16,
    int aI32,
    long aI64,
    byte[] aBinary,
    String aString)
  {
    this();
    this.aBool = aBool;
    this.__isset.aBool = true;
    this.aByte = aByte;
    this.__isset.aByte = true;
    this.aI16 = aI16;
    this.__isset.aI16 = true;
    this.aI32 = aI32;
    this.__isset.aI32 = true;
    this.aI64 = aI64;
    this.__isset.aI64 = true;
    this.aBinary = aBinary;
    this.__isset.aBinary = (aBinary != null);
    this.aString = aString;
    this.__isset.aString = (aString != null);
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSimple)
      return this.equals((TSimple)that);
    return false;
  }

  public boolean equals(TSimple that) {
    if (that == null)
      return false;

    boolean this_present_aBool = true;
    boolean that_present_aBool = true;
    if (this_present_aBool || that_present_aBool) {
      if (!(this_present_aBool && that_present_aBool))
        return false;
      if (this.aBool != that.aBool)
        return false;
    }

    boolean this_present_aByte = true;
    boolean that_present_aByte = true;
    if (this_present_aByte || that_present_aByte) {
      if (!(this_present_aByte && that_present_aByte))
        return false;
      if (this.aByte != that.aByte)
        return false;
    }

    boolean this_present_aI16 = true;
    boolean that_present_aI16 = true;
    if (this_present_aI16 || that_present_aI16) {
      if (!(this_present_aI16 && that_present_aI16))
        return false;
      if (this.aI16 != that.aI16)
        return false;
    }

    boolean this_present_aI32 = true;
    boolean that_present_aI32 = true;
    if (this_present_aI32 || that_present_aI32) {
      if (!(this_present_aI32 && that_present_aI32))
        return false;
      if (this.aI32 != that.aI32)
        return false;
    }

    boolean this_present_aI64 = true;
    boolean that_present_aI64 = true;
    if (this_present_aI64 || that_present_aI64) {
      if (!(this_present_aI64 && that_present_aI64))
        return false;
      if (this.aI64 != that.aI64)
        return false;
    }

    boolean this_present_aBinary = true && (this.aBinary != null);
    boolean that_present_aBinary = true && (that.aBinary != null);
    if (this_present_aBinary || that_present_aBinary) {
      if (!(this_present_aBinary && that_present_aBinary))
        return false;
      if (!java.util.Arrays.equals(this.aBinary, that.aBinary))
        return false;
    }

    boolean this_present_aString = true && (this.aString != null);
    boolean that_present_aString = true && (that.aString != null);
    if (this_present_aString || that_present_aString) {
      if (!(this_present_aString && that_present_aString))
        return false;
      if (!this.aString.equals(that.aString))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id)
      {
        case ABOOL:
          if (field.type == TType.BOOL) {
	          readABool(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ABYTE:
          if (field.type == TType.BYTE) {
	          readAByte(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AI16:
          if (field.type == TType.I16) {
	          readAI16(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AI32:
          if (field.type == TType.I32) {
	          readAI32(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AI64:
          if (field.type == TType.I64) {
	          readAI64(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ABINARY:
          if (field.type == TType.STRING) {
	          readABinary(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ASTRING:
          if (field.type == TType.STRING) {
	          readAString(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

	private void readAString(TProtocol iprot)
		throws TException
	{
		this.aString = iprot.readString();
		this.__isset.aString = true;
	}

	private void readABinary(TProtocol iprot)
		throws TException
	{
		this.aBinary = iprot.readBinary();
		this.__isset.aBinary = true;
	}

	private void readAI64(TProtocol iprot)
		throws TException
	{
		this.aI64 = iprot.readI64();
		this.__isset.aI64 = true;
	}

	private void readAI32(TProtocol iprot)
		throws TException
	{
		this.aI32 = iprot.readI32();
		this.__isset.aI32 = true;
	}

	private void readAI16(TProtocol iprot)
		throws TException
	{
		this.aI16 = iprot.readI16();
		this.__isset.aI16 = true;
	}

	private void readAByte(TProtocol iprot)
		throws TException
	{
		this.aByte = iprot.readByte();
		this.__isset.aByte = true;
	}

	private void readABool(TProtocol iprot)
		throws TException
	{
		this.aBool = iprot.readBool();
		this.__isset.aBool = true;
	}

	public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("TSimple");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    field.name = "aBool";
    field.type = TType.BOOL;
    field.id = ABOOL;
    oprot.writeFieldBegin(field);
    oprot.writeBool(this.aBool);
    oprot.writeFieldEnd();
    field.name = "aByte";
    field.type = TType.BYTE;
    field.id = ABYTE;
    oprot.writeFieldBegin(field);
    oprot.writeByte(this.aByte);
    oprot.writeFieldEnd();
    field.name = "aI16";
    field.type = TType.I16;
    field.id = AI16;
    oprot.writeFieldBegin(field);
    oprot.writeI16(this.aI16);
    oprot.writeFieldEnd();
    field.name = "aI32";
    field.type = TType.I32;
    field.id = AI32;
    oprot.writeFieldBegin(field);
    oprot.writeI32(this.aI32);
    oprot.writeFieldEnd();
    field.name = "aI64";
    field.type = TType.I64;
    field.id = AI64;
    oprot.writeFieldBegin(field);
    oprot.writeI64(this.aI64);
    oprot.writeFieldEnd();
    if (this.aBinary != null) {
      field.name = "aBinary";
      field.type = TType.STRING;
      field.id = ABINARY;
      oprot.writeFieldBegin(field);
      oprot.writeBinary(this.aBinary);
      oprot.writeFieldEnd();
    }
    if (this.aString != null) {
      field.name = "aString";
      field.type = TType.STRING;
      field.id = ASTRING;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.aString);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("TSimple(");
    boolean first = true;

    if (!first) sb.append(", ");
    sb.append("aBool:");
    sb.append(this.aBool);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aByte:");
    sb.append(this.aByte);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aI16:");
    sb.append(this.aI16);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aI32:");
    sb.append(this.aI32);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aI64:");
    sb.append(this.aI64);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aBinary:");
    sb.append(this.aBinary);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aString:");
    sb.append(this.aString);
    first = false;
    sb.append(")");
    return sb.toString();
  }

}